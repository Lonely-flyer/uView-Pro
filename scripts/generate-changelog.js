#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');

// Ëß£ÊûêÂëΩ‰ª§Ë°åÂèÇÊï∞
const args = process.argv.slice(2);
const useEmoji = args.includes('--emoji');
const usePlain = args.includes('--plain');
const onlyCurrent = args.includes('--current');
const sinceLastTag = args.includes('--last') || args.includes('--since-last-tag');

// Â¶ÇÊûúÊ≤°ÊúâÊåáÂÆöÂèÇÊï∞ÔºåÈªòËÆ§‰ΩøÁî® emoji
const shouldUseEmoji = useEmoji || (!usePlain && !useEmoji);

// Emoji Êò†Â∞Ñ
const emojiMap = {
    feat: '‚ú®',
    fix: 'üêõ',
    docs: 'üìù',
    style: 'üíÑ',
    refactor: '‚ôªÔ∏è',
    perf: '‚ö°',
    test: '‚úÖ',
    build: 'üì¶‚Äç',
    ci: 'üë∑',
    chore: 'üöÄ',
    revert: '‚è™'
};

// Á±ªÂûãÂêçÁß∞Êò†Â∞ÑÔºàÂ∏¶ emojiÔºâ
const typeNamesWithEmoji = {
    feat: '‚ú® Features | Êñ∞ÂäüËÉΩ',
    fix: 'üêõ Bug Fixes | Bug ‰øÆÂ§ç',
    docs: 'üìù Documentation | ÊñáÊ°£',
    style: 'üíÑ Styles | È£éÊ†º',
    refactor: '‚ôªÔ∏è Code Refactoring | ‰ª£Á†ÅÈáçÊûÑ',
    perf: '‚ö° Performance Improvements | ÊÄßËÉΩ‰ºòÂåñ',
    test: '‚úÖ Tests | ÊµãËØï',
    build: 'üì¶‚Äç Build System | ÊâìÂåÖÊûÑÂª∫',
    ci: 'üë∑ Continuous Integration | CI ÈÖçÁΩÆ',
    chore: 'üöÄ Chore | ÊûÑÂª∫/Â∑•Á®ã‰æùËµñ/Â∑•ÂÖ∑',
    revert: '‚è™ Revert | ÂõûÈÄÄ'
};

// Á±ªÂûãÂêçÁß∞Êò†Â∞ÑÔºà‰∏çÂ∏¶ emojiÔºâ
const typeNamesPlain = {
    feat: 'Features | Êñ∞ÂäüËÉΩ',
    fix: 'Bug Fixes | Bug ‰øÆÂ§ç',
    docs: 'Documentation | ÊñáÊ°£',
    style: 'Styles | È£éÊ†º',
    refactor: 'Code Refactoring | ‰ª£Á†ÅÈáçÊûÑ',
    perf: 'Performance Improvements | ÊÄßËÉΩ‰ºòÂåñ',
    test: 'Tests | ÊµãËØï',
    build: 'Build System | ÊâìÂåÖÊûÑÂª∫',
    ci: 'Continuous Integration | CI ÈÖçÁΩÆ',
    chore: 'Chore | ÊûÑÂª∫/Â∑•Á®ã‰æùËµñ/Â∑•ÂÖ∑',
    revert: 'Revert | ÂõûÈÄÄ'
};

// Ê†πÊçÆËÆæÁΩÆÈÄâÊã©Á±ªÂûãÂêçÁß∞
const typeNames = shouldUseEmoji ? typeNamesWithEmoji : typeNamesPlain;

function safeExec(cmd) {
    try {
        return execSync(cmd, { encoding: 'utf8' }).trim();
    } catch (e) {
        return '';
    }
}

function resolveRange() {
    // --current: ‰ª• package.json ÁöÑ version ‰∏∫Ê†áÁ≠æ vX.Y.ZÔºåÂèñ‰∏ä‰∏Ä‰∏™Ê†áÁ≠æ..ÂΩìÂâçÊ†áÁ≠æ
    if (onlyCurrent) {
        const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        const currentTag = `v${pkg.version}`;
        // ‰∏ä‰∏Ä‰∏™Ê†áÁ≠æÔºàÂΩìÂâçÊ†áÁ≠æÁöÑÂâç‰∏Ä‰∏™Ôºâ
        const prevTag = safeExec(`git describe --tags --abbrev=0 ${currentTag}^`);
        if (prevTag) return `${prevTag}..${currentTag}`;
        // ÂÖúÂ∫ïÔºöËã•ÂΩìÂâçÊ†áÁ≠æ‰∏çÂ≠òÂú®ÔºåÂàôÂèñÊúÄËøë‰∏Ä‰∏™Ê†áÁ≠æ..HEAD
        const lastTag = safeExec('git describe --tags --abbrev=0');
        if (lastTag) return `${lastTag}..HEAD`;
        return '';
    }
    // --last / --since-last-tag: ÊúÄËøë‰∏Ä‰∏™Ê†áÁ≠æ..HEAD
    if (sinceLastTag) {
        const lastTag = safeExec('git describe --tags --abbrev=0');
        if (lastTag) return `${lastTag}..HEAD`;
        return '';
    }
    // ÈªòËÆ§ÔºöÂÖ®Èáè
    return '';
}

function generateChangelog() {
    try {
        const range = resolveRange();
        console.log(`üîÑ Generating changelog... ${shouldUseEmoji ? 'with emoji' : 'without emoji'}${range ? ` (range: ${range})` : ''}`);

        const rangeArg = range ? ` ${range}` : '';
        // Ëé∑ÂèñÊèê‰∫§
        const commits = execSync(`git log${rangeArg} --pretty=format:"%H|%s" --reverse`, { encoding: 'utf8' })
            .split('\n')
            .filter(line => line.trim())
            .map(line => {
                const [hash, subject] = line.split('|');
                return { hash, subject };
            });

        // Ëß£ÊûêÊèê‰∫§Á±ªÂûã
        const commitsByType = {};

        commits.forEach(commit => {
            if (commit.subject) {
                // ÂåπÈÖç conventional commits Ê†ºÂºè
                const match = commit.subject.match(/^(\w+)(?:\(([^)]+)\))?:\s*(.+)/);
                if (match) {
                    const [, type, scope, description] = match;
                    if (emojiMap[type]) {
                        if (!commitsByType[type]) {
                            commitsByType[type] = [];
                        }
                        commitsByType[type].push({
                            ...commit,
                            scope: scope || '',
                            description: description.trim()
                        });
                    }
                }
            }
        });

        // ÁîüÊàê changelog ÂÜÖÂÆπ
        let changelog = `# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n`;

        // ÊåâÁ±ªÂûãÂàÜÁªÑËæìÂá∫
        Object.keys(commitsByType).forEach(type => {
            if (commitsByType[type].length > 0) {
                const typeName = typeNames[type];
                changelog += `### ${typeName}\n\n`;

                commitsByType[type].forEach(commit => {
                    const scope = commit.scope ? `**${commit.scope}:** ` : '';
                    const shortHash = commit.hash.substring(0, 7);
                    changelog += `- ${scope}${commit.description} ([${shortHash}](https://gitee.com/anyup/uView-Pro/commit/${commit.hash}))\n`;
                });

                changelog += '\n';
            }
        });

        // Â¶ÇÊûúÊ≤°ÊúâÊâæÂà∞‰ªª‰ΩïÁ¨¶ÂêàËßÑËåÉÁöÑÊèê‰∫§ÔºåÊ∑ªÂä†ÈªòËÆ§ÂÜÖÂÆπ
        if (Object.keys(commitsByType).length === 0) {
            if (shouldUseEmoji) {
                changelog += `### ‚ú® Features | Êñ∞ÂäüËÉΩ\n\n- Initial project setup with commitizen, cz-git, and conventional changelog\n\n### üêõ Bug Fixes | Bug ‰øÆÂ§ç\n\n### üìù Documentation | ÊñáÊ°£\n\n### üíÑ Styles | È£éÊ†º\n\n### ‚ôªÔ∏è Code Refactoring | ‰ª£Á†ÅÈáçÊûÑ\n\n### ‚ö° Performance Improvements | ÊÄßËÉΩ‰ºòÂåñ\n\n### ‚úÖ Tests | ÊµãËØï\n\n### üì¶‚Äç Build System | ÊâìÂåÖÊûÑÂª∫\n\n### üë∑ Continuous Integration | CI ÈÖçÁΩÆ\n\n### üöÄ Chore | ÊûÑÂª∫/Â∑•Á®ã‰æùËµñ/Â∑•ÂÖ∑\n\n### ‚è™ Revert | ÂõûÈÄÄ\n\n`;
            } else {
                changelog += `### Features | Êñ∞ÂäüËÉΩ\n\n- Initial project setup with commitizen, cz-git, and conventional changelog\n\n### Bug Fixes | Bug ‰øÆÂ§ç\n\n### Documentation | ÊñáÊ°£\n\n### Styles | È£éÊ†º\n\n### Code Refactoring | ‰ª£Á†ÅÈáçÊûÑ\n\n### Performance Improvements | ÊÄßËÉΩ‰ºòÂåñ\n\n### Tests | ÊµãËØï\n\n### Build System | ÊâìÂåÖÊûÑÂª∫\n\n### Continuous Integration | CI ÈÖçÁΩÆ\n\n### Chore | ÊûÑÂª∫/Â∑•Á®ã‰æùËµñ/Â∑•ÂÖ∑\n\n### Revert | ÂõûÈÄÄ\n\n`;
            }
        }

        // ÂÜôÂÖ•Êñá‰ª∂
        fs.writeFileSync('CHANGELOG.md', changelog);
        console.log(`‚úÖ Changelog generated successfully ${shouldUseEmoji ? 'with emoji icons' : 'without emoji'}!`);

        // ÊòæÁ§∫ÁªüËÆ°‰ø°ÊÅØ
        Object.keys(commitsByType).forEach(type => {
            const emoji = shouldUseEmoji ? emojiMap[type] + ' ' : '';
            console.log(`${emoji}${typeNamesPlain[type]}: ${commitsByType[type].length} commits`);
        });

        // ÊòæÁ§∫‰ΩøÁî®ËØ¥Êòé
        console.log('\nüìñ Usage:');
        console.log('  pnpm changelog:emoji              - Generate changelog with emoji (full history)');
        console.log('  pnpm changelog:plain              - Generate changelog without emoji (full history)');
        console.log('  pnpm changelog:current            - Generate current version changelog (emoji)');
        console.log('  pnpm changelog:current:plain      - Generate current version changelog (plain)');
        console.log('  pnpm changelog:last               - Generate since last tag changelog (emoji)');
        console.log('  pnpm changelog:last:plain         - Generate since last tag changelog (plain)');
    } catch (error) {
        console.error('‚ùå Error generating changelog:', error.message);
        process.exit(1);
    }
}

generateChangelog();
